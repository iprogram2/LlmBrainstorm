@{
    ViewData["Title"] = "LLM Brainstorming Platform";
}

<div class="container">
    <h1 class="mt-4 mb-4">LLM Brainstorming Platform</h1>

    <div class="row mb-4">
        <!-- Left panel: LLM selection -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Active LLMs</h5>
                </div>
                <div class="card-body">
                    <div class="llm-selection">
                        <div class="form-check form-switch mb-2">
                            <input class="form-check-input llm-checkbox" type="checkbox" data-llm="ChatGPT" id="checkbox-chatgpt">
                            <label class="form-check-label" for="checkbox-chatgpt">ChatGPT</label>
                        </div>
                        <div class="form-check form-switch mb-2">
                            <input class="form-check-input llm-checkbox" type="checkbox" data-llm="Gemini" id="checkbox-gemini">
                            <label class="form-check-label" for="checkbox-gemini">Gemini</label>
                        </div>
                        <div class="form-check form-switch mb-2">
                            <input class="form-check-input llm-checkbox" type="checkbox" data-llm="Grok" id="checkbox-grok">
                            <label class="form-check-label" for="checkbox-grok">Grok</label>
                        </div>
                        <div class="form-check form-switch mb-2">
                            <input class="form-check-input llm-checkbox" type="checkbox" data-llm="Llama" id="checkbox-llama">
                            <label class="form-check-label" for="checkbox-llama">Llama</label>
                        </div>
                        <div class="form-check form-switch mb-2">
                            <input class="form-check-input llm-checkbox" type="checkbox" data-llm="DeepSeek" id="checkbox-deepseek">
                            <label class="form-check-label" for="checkbox-deepseek">DeepSeek</label>
                        </div>
                        <div class="form-check form-switch mb-2">
                            <input class="form-check-input llm-checkbox" type="checkbox" data-llm="Claude" id="checkbox-claude">
                            <label class="form-check-label" for="checkbox-claude">Claude</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right panel: Conversation settings -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Conversation Settings</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="rounds-select" class="form-label">Rounds:</label>
                            <select class="form-select" id="rounds-select">
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3" selected>3</option>
                                <option value="4">4</option>
                                <option value="5">5</option>
                            </select>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="auto-proceed" class="form-label">Auto-proceed:</label>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="auto-proceed" checked>
                                <label class="form-check-label" for="auto-proceed">Enabled</label>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="response-time" class="form-label">Response time:</label>
                            <select class="form-select" id="response-time">
                                <option value="15">15 seconds</option>
                                <option value="30" selected>30 seconds</option>
                                <option value="60">60 seconds</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="input-section mb-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Prompt</h5>
            </div>
            <div class="card-body">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="prompt-input" placeholder="What would you like to brainstorm about today?">
                    <button class="btn btn-primary" id="go-btn">Start Brainstorming</button>
                </div>
            </div>
        </div>
    </div>

    <div id="conversation-container" class="mb-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Conversation <span id="round-indicator" class="badge bg-primary ms-2">Round 1 of 1</span></h5>
                <button id="next-round-btn" class="btn btn-sm btn-outline-primary" style="display: none;">Proceed to Next Round</button>
            </div>
            <div class="card-body">
                <div id="response-area">
                    <!-- Responses will appear here -->
                </div>

                <!-- Human input section -->
                <div class="human-input-section mt-4 border-top pt-3">
                    <h6>Add your thoughts to guide the conversation:</h6>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" id="follow-up-input" placeholder="Enter your follow-up question or comment">
                        <button class="btn btn-primary" id="follow-up-btn">Inject into conversation</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="final-section mb-4 text-center">
        <button class="btn btn-lg btn-primary" id="final-btn">Final Answer</button>
    </div>
</div>

<!-- API Key Modal -->
<div class="modal fade" id="api-key-modal" tabindex="-1" aria-labelledby="api-key-modal-label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="api-key-modal-label">Configure API for <span id="llm-name"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Please enter your API key to enable this LLM in the brainstorming session:</p>
                <div class="mb-3">
                    <label for="api-key-input" class="form-label">API Key:</label>
                    <input type="password" class="form-control" id="api-key-input" placeholder="Enter your API key">
                </div>
                <div class="mb-3" id="model-selection-container">
                    <label for="model-selection" class="form-label">Model:</label>
                    <select class="form-select" id="model-selection">
                        <!-- Will be populated dynamically based on the selected LLM -->
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="modal-save">Save & Enable</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <script>
        $(document).ready(function() {
            // Model options for each LLM
            const modelOptions = {
                'ChatGPT': [
                    { value: 'gpt-4o', label: 'GPT-4o' },
                    { value: 'gpt-4-turbo', label: 'GPT-4 Turbo' },
                    { value: 'gpt-3.5-turbo', label: 'GPT-3.5 Turbo' }
                ],
                'Gemini': [
                    { value: 'gemini-pro', label: 'Gemini Pro' },
                    { value: 'gemini-1.5-pro', label: 'Gemini 1.5 Pro' },
                    { value: 'gemini-1.5-flash', label: 'Gemini 1.5 Flash' }
                ],
                'Grok': [
                    { value: 'grok-1', label: 'Grok-1' }
                ],
                'Llama': [
                    { value: 'llama-3.1-70b', label: 'Llama 3.1 (70B)' },
                    { value: 'llama-3.1-8b', label: 'Llama 3.1 (8B)' }
                ],
                'DeepSeek': [
                    { value: 'deepseek-chat', label: 'DeepSeek Chat' },
                    { value: 'deepseek-coder', label: 'DeepSeek Coder' }
                ],
                'Claude': [
                    { value: 'claude-3-opus-20240229', label: 'Claude 3 Opus' },
                    { value: 'claude-3-sonnet-20240229', label: 'Claude 3 Sonnet' },
                    { value: 'claude-3-haiku-20240307', label: 'Claude 3 Haiku' }
                ]
            };

            // Store API configurations
            const apiConfigs = {
                'ChatGPT': {
                    model: 'gpt-4o',
                    apiKey: '',
                    enabled: false
                },
                'Gemini': {
                    model: 'gemini-pro',
                    apiKey: '',
                    enabled: false
                },
                'Grok': {
                    model: 'grok-1',
                    apiKey: '',
                    enabled: false
                },
                'Llama': {
                    model: 'llama-3.1-70b',
                    apiKey: '',
                    enabled: false
                },
                'DeepSeek': {
                    model: 'deepseek-chat',
                    apiKey: '',
                    enabled: false
                },
                'Claude': {
                    model: 'claude-3-opus-20240229',
                    apiKey: '',
                    enabled: false
                }
            };

            // Conversation state
            let currentRound = 1;
            let totalRounds = parseInt($('#rounds-select').val());
            let allResponses = [];
            let responseOrder = [];

            // Update round indicator
            function updateRoundIndicator() {
                $('#round-indicator').text(`Round ${currentRound} of ${totalRounds}`);
                
                // Show/hide next round button
                if (currentRound < totalRounds) {
                    $('#next-round-btn').show();
                } else {
                    $('#next-round-btn').hide();
                }
            }

            // Initialize round indicator
            updateRoundIndicator();

            // Load the configurations from the server for all LLMs
            function loadAllLlmConfigs() {
                const llmNames = Object.keys(apiConfigs);

                // Create an array of promises for each LLM config request
                const promises = llmNames.map(llm =>
                    fetch(`/api/config/${llm}`)
                        .then(response => response.json())
                        .then(config => {
                            // Update the API config with server values
                            apiConfigs[llm].model = config.defaultModel;
                            apiConfigs[llm].apiKey = config.apiKey;

                            // If has a valid key from config, enable it
                            if (config.hasConfiguredKey) {
                                apiConfigs[llm].enabled = true;
                                // Check the checkbox
                                $(`#checkbox-${llm.toLowerCase()}`).prop('checked', true);
                            }
                        })
                        .catch(error => {
                            console.error(`Failed to load config for ${llm}:`, error);
                        })
                );

                // Wait for all promises to resolve
                return Promise.all(promises);
            }

            // Load all LLM configs when page loads
            loadAllLlmConfigs().then(() => {
                console.log("All LLM configurations loaded from server");
            });

            // Handle rounds selection change
            $('#rounds-select').on('change', function() {
                totalRounds = parseInt($(this).val());
                updateRoundIndicator();
            });

            // Handle next round button
            $('#next-round-btn').on('click', function() {
                if (currentRound < totalRounds) {
                    currentRound++;
                    updateRoundIndicator();
                    
                    // Clear response area for new round
                    $('#response-area').empty();
                    
                    // Start the next round with the follow-up prompt
                    const followUpPrompt = $('#follow-up-input').val();
                    if (followUpPrompt.trim() !== '') {
                        startBrainstorming(followUpPrompt, true);
                        $('#follow-up-input').val('');
                    } else {
                        // If no follow-up provided, use the original prompt
                        startBrainstorming($('#prompt-input').val(), true);
                    }
                }
            });

            // When a checkbox is clicked, check if it's being enabled or disabled
            $('.llm-checkbox').on('change', function() {
                const llmName = $(this).data('llm');
                const isChecked = $(this).prop('checked');
                
                if (isChecked && !apiConfigs[llmName].enabled) {
                    // If checking and not already enabled, show the modal
                    showApiKeyModal(llmName);
                } else if (isChecked) {
                    // If already enabled, just update the enabled state
                    apiConfigs[llmName].enabled = true;
                } else {
                    // If unchecking, disable it
                    apiConfigs[llmName].enabled = false;
                }
            });

            // Show the API key modal for a specific LLM
            function showApiKeyModal(llmName) {
                // Set the LLM name in the modal
                $('#llm-name').text(llmName);
                
                // Set the current API key if available
                $('#api-key-input').val(apiConfigs[llmName].apiKey);
                
                // Populate the model selection dropdown
                const $modelSelect = $('#model-selection');
                $modelSelect.empty();
                
                modelOptions[llmName].forEach(option => {
                    const $option = $('<option></option>')
                        .val(option.value)
                        .text(option.label);
                    
                    // Select the current model if set
                    if (option.value === apiConfigs[llmName].model) {
                        $option.prop('selected', true);
                    }
                    
                    $modelSelect.append($option);
                });
                
                // Store the current LLM name for the save button
                $('#modal-save').data('llm', llmName);
                
                // Show the modal
                $('#api-key-modal').modal('show');
            }

            // Handle the save button in the modal
            $('#modal-save').on('click', function() {
                const llmName = $(this).data('llm');
                const apiKey = $('#api-key-input').val();
                const model = $('#model-selection').val();
                
                // Update the API config
                apiConfigs[llmName].apiKey = apiKey;
                apiConfigs[llmName].model = model;
                apiConfigs[llmName].enabled = true;
                
                // Close the modal
                $('#api-key-modal').modal('hide');
            });

            // Handle the Go button
            $('#go-btn').on('click', function() {
                const prompt = $('#prompt-input').val();
                if (prompt.trim() === '') {
                    alert('Please enter a prompt');
                    return;
                }
                
                // Reset for new brainstorming session
                currentRound = 1;
                updateRoundIndicator();
                allResponses = [];
                
                // Start the brainstorming session
                startBrainstorming(prompt, false);
            });

            // Handle the follow-up button
            $('#follow-up-btn').on('click', function() {
                const followUp = $('#follow-up-input').val();
                if (followUp.trim() === '') {
                    alert('Please enter a follow-up question or comment');
                    return;
                }
                
                // Add human input to the conversation
                const humanResponseElement = $('<div class="response-card human-response mb-3 p-3 border rounded bg-light"></div>')
                    .append('<h5>Human Input</h5>')
                    .append($('<p></p>').text(followUp));
                
                $('#response-area').append(humanResponseElement);
                
                // Start follow-up with the selected LLMs
                startBrainstorming(followUp, true);
                
                // Clear the follow-up input
                $('#follow-up-input').val('');
            });

            // Start the brainstorming session
            function startBrainstorming(prompt, isFollowUp) {
                // Clear the response area if not a follow-up
                if (!isFollowUp) {
                    $('#response-area').empty();
                }
                
                // Get the selected LLMs
                const selectedLlms = [];
                $('.llm-checkbox:checked').each(function() {
                    const llmName = $(this).data('llm');
                    if (apiConfigs[llmName].enabled) {
                        selectedLlms.push(llmName);
                    }
                });
                
                if (selectedLlms.length === 0) {
                    alert('Please select at least one LLM');
                    return;
                }
                
                // Store the order of responses for this round
                responseOrder = [...selectedLlms];
                
                // Create a loading indicator for each selected LLM
                selectedLlms.forEach(llmName => {
                    const loadingElement = createResponseCard(llmName, 'Loading...');
                    loadingElement.addClass('loading-card');
                    loadingElement.attr('id', `loading-${llmName.toLowerCase()}`);
                    $('#response-area').append(loadingElement);
                    
                    // Make the response cards draggable
                    makeResponseCardsDraggable();
                });
                
                // Send the request to each selected LLM
                selectedLlms.forEach(llmName => {
                    // Prepare the request data
                    const requestData = {
                        prompt: prompt,
                        llmName: llmName,
                        model: apiConfigs[llmName].model,
                        apiKey: apiConfigs[llmName].apiKey,
                        isFollowUp: isFollowUp
                    };
                    
                    // If it's a follow-up, include the previous responses
                    if (isFollowUp && allResponses.length > 0) {
                        // Find the most recent response from each LLM
                        const previousResponses = {};
                        for (let i = allResponses.length - 1; i >= 0; i--) {
                            const resp = allResponses[i];
                            if (!previousResponses[resp.llmName]) {
                                previousResponses[resp.llmName] = resp.response;
                            }
                        }
                        
                        // Add the previous LLM and its response
                        const previousLlms = Object.keys(previousResponses);
                        if (previousLlms.length > 0) {
                            const randomPrevLlm = previousLlms[Math.floor(Math.random() * previousLlms.length)];
                            requestData.previousLlm = randomPrevLlm;
                            requestData.previousResponse = previousResponses[randomPrevLlm];
                            requestData.originalPrompt = $('#prompt-input').val();
                        }
                    }
                    
                    // Send the request to the server
                    fetch('/api/ask', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(requestData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        // Remove the loading indicator
                        $(`#loading-${llmName.toLowerCase()}`).remove();
                        
                        if (data.success) {
                            // Store the response
                            allResponses.push({
                                llmName: llmName,
                                response: data.content,
                                timestamp: new Date()
                            });
                            
                            // Create the response element
                            const responseElement = createResponseCard(llmName, data.content);
                            
                            // Add action buttons
                            const actionButtons = $('<div class="action-buttons mt-2"></div>');
                            
                            // Follow-up button
                            const followUpButton = $('<button class="btn btn-sm btn-outline-primary me-2">Follow up</button>')
                                .on('click', function() {
                                    $('#follow-up-input').val(`Based on ${llmName}'s response, `).focus();
                                });
                            
                            // Skip button
                            const skipButton = $('<button class="btn btn-sm btn-outline-secondary me-2">Skip</button>')
                                .on('click', function() {
                                    responseElement.fadeOut(300, function() {
                                        $(this).remove();
                                    });
                                });
                            
                            // Expand button
                            const expandButton = $('<button class="btn btn-sm btn-outline-info">Expand</button>')
                                .on('click', function() {
                                    const contentElement = responseElement.find('.response-content');
                                    if (contentElement.hasClass('expanded')) {
                                        contentElement.removeClass('expanded');
                                        contentElement.css('max-height', '200px');
                                        $(this).text('Expand');
                                    } else {
                                        contentElement.addClass('expanded');
                                        contentElement.css('max-height', 'none');
                                        $(this).text('Collapse');
                                    }
                                });
                            
                            actionButtons.append(followUpButton, skipButton, expandButton);
                            responseElement.append(actionButtons);
                            
                            // Add the response to the page
                            $('#response-area').append(responseElement);
                            
                            // Make the response cards draggable
                            makeResponseCardsDraggable();
                        } else {
                            // Show error
                            const errorElement = $('<div class="alert alert-danger"></div>')
                                .text(`Error from ${llmName}: ${data.error}`);
                            $('#response-area').append(errorElement);
                        }
                    })
                    .catch(error => {
                        // Remove the loading indicator
                        $(`#loading-${llmName.toLowerCase()}`).remove();
                        
                        // Show error
                        const errorElement = $('<div class="alert alert-danger"></div>')
                            .text(`Error communicating with server: ${error.message}`);
                        $('#response-area').append(errorElement);
                    });
                });
            }

            // Create a response card for an LLM
            function createResponseCard(llmName, content) {
                const responseElement = $('<div class="response-card mb-3 p-3 border rounded"></div>');
                
                // Add a header with the LLM name and drag handle
                const header = $('<div class="response-header d-flex justify-content-between align-items-center mb-2"></div>');
                header.append($('<h5 class="mb-0"></h5>').text(llmName));
                header.append($('<span class="drag-handle badge bg-secondary">Drag to reorder</span>'));
                responseElement.append(header);
                
                // Add the response content
                const contentElement = $('<div class="response-content" style="max-height: 200px; overflow-y: auto;"></div>')
                    .html(content.replace(/\n/g, '<br>'));
                responseElement.append(contentElement);
                
                // Add data attribute for the LLM name
                responseElement.attr('data-llm', llmName);
                
                return responseElement;
            }

            // Make response cards draggable
            function makeResponseCardsDraggable() {
                $('#response-area').sortable({
                    handle: '.drag-handle',
                    placeholder: 'response-card-placeholder',
                    update: function(event, ui) {
                        // Update the response order based on the new arrangement
                        responseOrder = [];
                        $('.response-card').each(function() {
                            const llmName = $(this).data('llm');
                            if (llmName) {
                                responseOrder.push(llmName);
                            }
                        });
                        console.log('New response order:', responseOrder);
                    }
                });
            }

            // Handle the final answer button
            $('#final-btn').on('click', function() {
                // Collect all responses
                const finalResponses = [];
                $('.response-card').each(function() {
                    const llmName = $(this).data('llm');
                    const content = $(this).find('.response-content').html().replace(/<br>/g, '\n');
                    if (llmName) {
                        finalResponses.push({
                            llmName: llmName,
                            response: content
                        });
                    }
                });
                
                // Create a summary
                let summary = `# Brainstorming Summary\n\n`;
                summary += `## Original Prompt\n${$('#prompt-input').val()}\n\n`;
                summary += `## Responses\n\n`;
                
                finalResponses.forEach(resp => {
                    summary += `### ${resp.llmName}\n${resp.response}\n\n`;
                });
                
                // Display the summary
                const summaryElement = $('<div class="summary-card p-3 border rounded bg-light"></div>')
                    .append('<h4>Brainstorming Summary</h4>')
                    .append($('<pre class="summary-content"></pre>').text(summary));
                
                // Clear the response area and add the summary
                $('#response-area').empty().append(summaryElement);
                
                // Hide the next round button
                $('#next-round-btn').hide();
            });
        });
    </script>

    <style>
        .response-card {
            background-color: #f8f9fa;
            transition: all 0.3s ease;
        }
        
        .response-card:hover {
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        
        .drag-handle {
            cursor: move;
            user-select: none;
        }
        
        .response-card-placeholder {
            border: 2px dashed #ced4da;
            height: 100px;
            margin-bottom: 1rem;
        }
        
        .human-response {
            background-color: #e9f5ff !important;
        }
        
        .loading-card {
            opacity: 0.7;
        }
        
        .expanded {
            max-height: none !important;
        }
    </style>
}
